import os
import random
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "7503700705:AAEXFMAoWj_CxpUbciu2Vf5XSr0qRtlYaDE"

# –°–ø–∏—Å–æ–∫ URL —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
RANDOM_IMAGE_URLS = [
    "https://avatars.mds.yandex.net/i?id=ee12572888d9938211c31c79eb9b7ecdad22f096-16971703-images-thumbs&n=13",
    "https://avatars.mds.yandex.net/i?id=6bf26c2270337e285ef945fe16108546f4eef490-4296724-images-thumbs&n=13",
    "https://avatars.mds.yandex.net/i?id=deea0acedc4187b7e29f01c9f9e1c4d7b6315353-5234690-images-thumbs&n=13",
    "https://avatars.mds.yandex.net/i?id=71436e914f324796f41e425e80a1395462b57246-5347001-images-thumbs&n=13"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ MarkdownV2
def escape_markdown(text):
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in text])

# –î–µ–π—Å—Ç–≤–∏–µ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–∏–≥—Ä–∞'],
        ['‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:\n"
        "‚Ä¢ üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–∏–≥—Ä–∞\n"
        "‚Ä¢ ‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç",
        reply_markup=reply_markup
    )

# –î–µ–π—Å—Ç–≤–∏–µ /send_random_photo
async def send_random_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π URL
        random_url = random.choice(RANDOM_IMAGE_URLS)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
        await update.message.reply_photo(
            photo=random_url,
            caption="–í–æ—Ç –≤–∞—à —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–≥—Ä ;) üì∏"
        )

        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ: {random_url}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ üò¢")

# –§—É–Ω–∫—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def format_bold(text):
    return f"*{text}*"

def format_italic(text):
    return f"_{text}_"

def format_strikethrough(text):
    return f"~{text}~"

def format_code(text):
    return f"`{text}`"

def format_bold_italic(text):
    return f"*_{text}_*"

# –ü–æ–∫–∞–∑ –º–µ–Ω—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def show_format_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = update.message.text
    context.user_data['original_text'] = user_text

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏—Ä–Ω—ã–π", callback_data="bold"),
            InlineKeyboardButton("–ö—É—Ä—Å–∏–≤", callback_data="italic")
        ],
        [
            InlineKeyboardButton("–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π", callback_data="strike"),
            InlineKeyboardButton("–ö–æ–¥", callback_data="code")
        ],
        [
            InlineKeyboardButton("–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤", callback_data="bold_italic")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"üìù –í–∞—à —Ç–µ–∫—Å—Ç: {user_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
async def handle_format_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    format_type = query.data
    original_text = context.user_data.get('original_text', '')

    if not original_text:
        await query.edit_message_text("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if format_type == "bold":
        formatted_text = format_bold(original_text)
        format_name = "–∂–∏—Ä–Ω—ã–π"
        parse_mode = 'MarkdownV2'
    elif format_type == "italic":
        formatted_text = format_italic(original_text)
        format_name = "–∫—É—Ä—Å–∏–≤"
        parse_mode = 'MarkdownV2'
    elif format_type == "strike":
        formatted_text = format_strikethrough(original_text)
        format_name = "–ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π"
        parse_mode = 'MarkdownV2'
    elif format_type == "code":
        formatted_text = format_code(original_text)
        format_name = "–º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π"
        parse_mode = 'MarkdownV2'
    elif format_type == "bold_italic":
        formatted_text = format_bold_italic(original_text)
        format_name = "–∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤"
        parse_mode = 'MarkdownV2'

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥—Ä—É–≥–æ–≥–æ —Å—Ç–∏–ª—è
    back_keyboard = [[InlineKeyboardButton("üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å", callback_data="back")]]
    back_markup = InlineKeyboardMarkup(back_keyboard)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    escaped_original = escape_markdown(original_text)
    escaped_format_name = escape_markdown(format_name)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await query.edit_message_text(
        f"‚úÖ *–í–∞—à —Ç–µ–∫—Å—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω\\!*\n\n"
        f"*–û—Ä–∏–≥–∏–Ω–∞–ª:* {escaped_original}\n"
        f"*–°—Ç–∏–ª—å:* {escaped_format_name}\n\n"
        f"*–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:*",
        parse_mode='MarkdownV2',
        reply_markup=back_markup
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.reply_text(
        formatted_text,
        parse_mode=parse_mode
    )

# –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è
async def handle_back_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    original_text = context.user_data.get('original_text', '')

    if not original_text:
        await query.edit_message_text("–¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–Ω–æ–≤–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("–ñ–∏—Ä–Ω—ã–π", callback_data="bold"),
            InlineKeyboardButton("–ö—É—Ä—Å–∏–≤", callback_data="italic")
        ],
        [
            InlineKeyboardButton("–ü–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π", callback_data="strike"),
            InlineKeyboardButton("–ö–æ–¥", callback_data="code")
        ],
        [
            InlineKeyboardButton("–ñ–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤", callback_data="bold_italic")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–í–∞—à —Ç–µ–∫—Å—Ç: {original_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == 'üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ñ–æ—Ç–æ —Ç–∏–≥—Ä–∞':
        await send_random_photo(update, context)
    elif text == '‚úèÔ∏è –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç':
        await update.message.reply_text(
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å:"
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await show_format_menu(update, context)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")

def main():
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_format_callback, pattern="^(bold|italic|strike|code|bold_italic)$"))
    application.add_handler(CallbackQueryHandler(handle_back_callback, pattern="^back$"))
    application.add_error_handler(error_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main()